%% Generated with 'testgen v0.2.0'
%% Revision 1 of the exercises generator was used
%% https://github.com/exercism/problem-specifications/raw/42dd0cea20498fd544b152c4e2c0a419bb7e266a/exercises/largest-series-product/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(largest_series_product_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_finds_the_largest_product_if_span_equals_length_test_'() ->
    {"finds the largest product if span equals "
     "length",
     ?_assertEqual(18,
		   largest_series_product:largest_product("29", 2))}.

'2_can_find_the_largest_product_of_2_with_numbers_in_order_test_'() ->
    {"can find the largest product of 2 with "
     "numbers in order",
     ?_assertEqual(72,
		   largest_series_product:largest_product("0123456789",
							  2))}.

'3_can_find_the_largest_product_of_2_test_'() ->
    {"can find the largest product of 2",
     ?_assertEqual(48,
		   largest_series_product:largest_product("576802143",
							  2))}.

'4_can_find_the_largest_product_of_3_with_numbers_in_order_test_'() ->
    {"can find the largest product of 3 with "
     "numbers in order",
     ?_assertEqual(504,
		   largest_series_product:largest_product("0123456789",
							  3))}.

'5_can_find_the_largest_product_of_3_test_'() ->
    {"can find the largest product of 3",
     ?_assertEqual(270,
		   largest_series_product:largest_product("1027839564",
							  3))}.

'6_can_find_the_largest_product_of_5_with_numbers_in_order_test_'() ->
    {"can find the largest product of 5 with "
     "numbers in order",
     ?_assertEqual(15120,
		   largest_series_product:largest_product("0123456789",
							  5))}.

'7_can_get_the_largest_product_of_a_big_number_test_'() ->
    {"can get the largest product of a big "
     "number",
     ?_assertEqual(23520,
		   largest_series_product:largest_product("731671765313306249192251196744265747423553491"
							  "94934",
							  6))}.

'8_reports_zero_if_the_only_digits_are_zero_test_'() ->
    {"reports zero if the only digits are "
     "zero",
     ?_assertEqual(0,
		   largest_series_product:largest_product("0000", 2))}.

'9_reports_zero_if_all_spans_include_zero_test_'() ->
    {"reports zero if all spans include zero",
     ?_assertEqual(0,
		   largest_series_product:largest_product("99099", 3))}.

'10_rejects_span_longer_than_string_length_test_'() ->
    {"rejects span longer than string length",
     ?_assertError(_,
		   largest_series_product:largest_product("123", 4))}.

'11_rejects_empty_string_and_nonzero_span_test_'() ->
    {"rejects empty string and nonzero span",
     ?_assertError(_,
		   largest_series_product:largest_product([], 1))}.

'12_rejects_invalid_character_in_digits_test_'() ->
    {"rejects invalid character in digits",
     ?_assertError(_,
		   largest_series_product:largest_product("1234a5", 2))}.

'13_rejects_negative_span_test_'() ->
    {"rejects negative span",
     ?_assertError(_,
		   largest_series_product:largest_product("12345", -1))}.
